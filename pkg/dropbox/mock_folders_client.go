// Code generated by mockery. DO NOT EDIT.

package dropbox

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockFoldersClient is an autogenerated mock type for the FoldersClient type
type MockFoldersClient struct {
	mock.Mock
}

type MockFoldersClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFoldersClient) EXPECT() *MockFoldersClient_Expecter {
	return &MockFoldersClient_Expecter{mock: &_m.Mock}
}

// CloseSession provides a mock function with given fields: ctx, filepath, sessionID, offset
func (_m *MockFoldersClient) CloseSession(ctx context.Context, filepath string, sessionID string, offset uint) (*UploadFileResponse, error) {
	ret := _m.Called(ctx, filepath, sessionID, offset)

	if len(ret) == 0 {
		panic("no return value specified for CloseSession")
	}

	var r0 *UploadFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint) (*UploadFileResponse, error)); ok {
		return rf(ctx, filepath, sessionID, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint) *UploadFileResponse); ok {
		r0 = rf(ctx, filepath, sessionID, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UploadFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, uint) error); ok {
		r1 = rf(ctx, filepath, sessionID, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFoldersClient_CloseSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSession'
type MockFoldersClient_CloseSession_Call struct {
	*mock.Call
}

// CloseSession is a helper method to define mock.On call
//   - ctx context.Context
//   - filepath string
//   - sessionID string
//   - offset uint
func (_e *MockFoldersClient_Expecter) CloseSession(ctx interface{}, filepath interface{}, sessionID interface{}, offset interface{}) *MockFoldersClient_CloseSession_Call {
	return &MockFoldersClient_CloseSession_Call{Call: _e.mock.On("CloseSession", ctx, filepath, sessionID, offset)}
}

func (_c *MockFoldersClient_CloseSession_Call) Run(run func(ctx context.Context, filepath string, sessionID string, offset uint)) *MockFoldersClient_CloseSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(uint))
	})
	return _c
}

func (_c *MockFoldersClient_CloseSession_Call) Return(_a0 *UploadFileResponse, _a1 error) *MockFoldersClient_CloseSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoldersClient_CloseSession_Call) RunAndReturn(run func(context.Context, string, string, uint) (*UploadFileResponse, error)) *MockFoldersClient_CloseSession_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSession provides a mock function with given fields: ctx, content
func (_m *MockFoldersClient) CreateSession(ctx context.Context, content []byte) (*SessionResponse, error) {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *SessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (*SessionResponse, error)); ok {
		return rf(ctx, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *SessionResponse); ok {
		r0 = rf(ctx, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFoldersClient_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockFoldersClient_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - content []byte
func (_e *MockFoldersClient_Expecter) CreateSession(ctx interface{}, content interface{}) *MockFoldersClient_CreateSession_Call {
	return &MockFoldersClient_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, content)}
}

func (_c *MockFoldersClient_CreateSession_Call) Run(run func(ctx context.Context, content []byte)) *MockFoldersClient_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *MockFoldersClient_CreateSession_Call) Return(_a0 *SessionResponse, _a1 error) *MockFoldersClient_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoldersClient_CreateSession_Call) RunAndReturn(run func(context.Context, []byte) (*SessionResponse, error)) *MockFoldersClient_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function with given fields: ctx, filepath
func (_m *MockFoldersClient) DeleteFile(ctx context.Context, filepath string) error {
	ret := _m.Called(ctx, filepath)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, filepath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFoldersClient_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockFoldersClient_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - filepath string
func (_e *MockFoldersClient_Expecter) DeleteFile(ctx interface{}, filepath interface{}) *MockFoldersClient_DeleteFile_Call {
	return &MockFoldersClient_DeleteFile_Call{Call: _e.mock.On("DeleteFile", ctx, filepath)}
}

func (_c *MockFoldersClient_DeleteFile_Call) Run(run func(ctx context.Context, filepath string)) *MockFoldersClient_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFoldersClient_DeleteFile_Call) Return(_a0 error) *MockFoldersClient_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFoldersClient_DeleteFile_Call) RunAndReturn(run func(context.Context, string) error) *MockFoldersClient_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadRange provides a mock function with given fields: ctx, path, start, length
func (_m *MockFoldersClient) DownloadRange(ctx context.Context, path string, start uint64, length uint64) (io.ReadCloser, error) {
	ret := _m.Called(ctx, path, start, length)

	if len(ret) == 0 {
		panic("no return value specified for DownloadRange")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (io.ReadCloser, error)); ok {
		return rf(ctx, path, start, length)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) io.ReadCloser); ok {
		r0 = rf(ctx, path, start, length)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = rf(ctx, path, start, length)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFoldersClient_DownloadRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadRange'
type MockFoldersClient_DownloadRange_Call struct {
	*mock.Call
}

// DownloadRange is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - start uint64
//   - length uint64
func (_e *MockFoldersClient_Expecter) DownloadRange(ctx interface{}, path interface{}, start interface{}, length interface{}) *MockFoldersClient_DownloadRange_Call {
	return &MockFoldersClient_DownloadRange_Call{Call: _e.mock.On("DownloadRange", ctx, path, start, length)}
}

func (_c *MockFoldersClient_DownloadRange_Call) Run(run func(ctx context.Context, path string, start uint64, length uint64)) *MockFoldersClient_DownloadRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *MockFoldersClient_DownloadRange_Call) Return(_a0 io.ReadCloser, _a1 error) *MockFoldersClient_DownloadRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoldersClient_DownloadRange_Call) RunAndReturn(run func(context.Context, string, uint64, uint64) (io.ReadCloser, error)) *MockFoldersClient_DownloadRange_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, path, recursive, limit
func (_m *MockFoldersClient) List(ctx context.Context, path string, recursive bool, limit int) ([]Entry, string, bool, error) {
	ret := _m.Called(ctx, path, recursive, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []Entry
	var r1 string
	var r2 bool
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, int) ([]Entry, string, bool, error)); ok {
		return rf(ctx, path, recursive, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, int) []Entry); ok {
		r0 = rf(ctx, path, recursive, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, int) string); ok {
		r1 = rf(ctx, path, recursive, limit)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, bool, int) bool); ok {
		r2 = rf(ctx, path, recursive, limit)
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, bool, int) error); ok {
		r3 = rf(ctx, path, recursive, limit)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockFoldersClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockFoldersClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - recursive bool
//   - limit int
func (_e *MockFoldersClient_Expecter) List(ctx interface{}, path interface{}, recursive interface{}, limit interface{}) *MockFoldersClient_List_Call {
	return &MockFoldersClient_List_Call{Call: _e.mock.On("List", ctx, path, recursive, limit)}
}

func (_c *MockFoldersClient_List_Call) Run(run func(ctx context.Context, path string, recursive bool, limit int)) *MockFoldersClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].(int))
	})
	return _c
}

func (_c *MockFoldersClient_List_Call) Return(_a0 []Entry, _a1 string, _a2 bool, _a3 error) *MockFoldersClient_List_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockFoldersClient_List_Call) RunAndReturn(run func(context.Context, string, bool, int) ([]Entry, string, bool, error)) *MockFoldersClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListContinue provides a mock function with given fields: ctx, cursor
func (_m *MockFoldersClient) ListContinue(ctx context.Context, cursor string) ([]Entry, string, bool, error) {
	ret := _m.Called(ctx, cursor)

	if len(ret) == 0 {
		panic("no return value specified for ListContinue")
	}

	var r0 []Entry
	var r1 string
	var r2 bool
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]Entry, string, bool, error)); ok {
		return rf(ctx, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []Entry); ok {
		r0 = rf(ctx, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, cursor)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) bool); ok {
		r2 = rf(ctx, cursor)
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string) error); ok {
		r3 = rf(ctx, cursor)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockFoldersClient_ListContinue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContinue'
type MockFoldersClient_ListContinue_Call struct {
	*mock.Call
}

// ListContinue is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor string
func (_e *MockFoldersClient_Expecter) ListContinue(ctx interface{}, cursor interface{}) *MockFoldersClient_ListContinue_Call {
	return &MockFoldersClient_ListContinue_Call{Call: _e.mock.On("ListContinue", ctx, cursor)}
}

func (_c *MockFoldersClient_ListContinue_Call) Run(run func(ctx context.Context, cursor string)) *MockFoldersClient_ListContinue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFoldersClient_ListContinue_Call) Return(_a0 []Entry, _a1 string, _a2 bool, _a3 error) *MockFoldersClient_ListContinue_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockFoldersClient_ListContinue_Call) RunAndReturn(run func(context.Context, string) ([]Entry, string, bool, error)) *MockFoldersClient_ListContinue_Call {
	_c.Call.Return(run)
	return _c
}

// Longpoll provides a mock function with given fields: ctx, cursor, timeout
func (_m *MockFoldersClient) Longpoll(ctx context.Context, cursor string, timeout time.Duration) (bool, error) {
	ret := _m.Called(ctx, cursor, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Longpoll")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (bool, error)); ok {
		return rf(ctx, cursor, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) bool); ok {
		r0 = rf(ctx, cursor, timeout)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, cursor, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFoldersClient_Longpoll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Longpoll'
type MockFoldersClient_Longpoll_Call struct {
	*mock.Call
}

// Longpoll is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor string
//   - timeout time.Duration
func (_e *MockFoldersClient_Expecter) Longpoll(ctx interface{}, cursor interface{}, timeout interface{}) *MockFoldersClient_Longpoll_Call {
	return &MockFoldersClient_Longpoll_Call{Call: _e.mock.On("Longpoll", ctx, cursor, timeout)}
}

func (_c *MockFoldersClient_Longpoll_Call) Run(run func(ctx context.Context, cursor string, timeout time.Duration)) *MockFoldersClient_Longpoll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockFoldersClient_Longpoll_Call) Return(_a0 bool, _a1 error) *MockFoldersClient_Longpoll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoldersClient_Longpoll_Call) RunAndReturn(run func(context.Context, string, time.Duration) (bool, error)) *MockFoldersClient_Longpoll_Call {
	_c.Call.Return(run)
	return _c
}

// UploadChunk provides a mock function with given fields: ctx, sessionID, content, offset
func (_m *MockFoldersClient) UploadChunk(ctx context.Context, sessionID string, content []byte, offset uint) error {
	ret := _m.Called(ctx, sessionID, content, offset)

	if len(ret) == 0 {
		panic("no return value specified for UploadChunk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, uint) error); ok {
		r0 = rf(ctx, sessionID, content, offset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFoldersClient_UploadChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadChunk'
type MockFoldersClient_UploadChunk_Call struct {
	*mock.Call
}

// UploadChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
//   - content []byte
//   - offset uint
func (_e *MockFoldersClient_Expecter) UploadChunk(ctx interface{}, sessionID interface{}, content interface{}, offset interface{}) *MockFoldersClient_UploadChunk_Call {
	return &MockFoldersClient_UploadChunk_Call{Call: _e.mock.On("UploadChunk", ctx, sessionID, content, offset)}
}

func (_c *MockFoldersClient_UploadChunk_Call) Run(run func(ctx context.Context, sessionID string, content []byte, offset uint)) *MockFoldersClient_UploadChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(uint))
	})
	return _c
}

func (_c *MockFoldersClient_UploadChunk_Call) Return(_a0 error) *MockFoldersClient_UploadChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFoldersClient_UploadChunk_Call) RunAndReturn(run func(context.Context, string, []byte, uint) error) *MockFoldersClient_UploadChunk_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function with given fields: ctx, filepath, content
func (_m *MockFoldersClient) UploadFile(ctx context.Context, filepath string, content []byte) (*UploadFileResponse, error) {
	ret := _m.Called(ctx, filepath, content)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 *UploadFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (*UploadFileResponse, error)); ok {
		return rf(ctx, filepath, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) *UploadFileResponse); ok {
		r0 = rf(ctx, filepath, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UploadFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, filepath, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFoldersClient_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockFoldersClient_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - filepath string
//   - content []byte
func (_e *MockFoldersClient_Expecter) UploadFile(ctx interface{}, filepath interface{}, content interface{}) *MockFoldersClient_UploadFile_Call {
	return &MockFoldersClient_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, filepath, content)}
}

func (_c *MockFoldersClient_UploadFile_Call) Run(run func(ctx context.Context, filepath string, content []byte)) *MockFoldersClient_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockFoldersClient_UploadFile_Call) Return(_a0 *UploadFileResponse, _a1 error) *MockFoldersClient_UploadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoldersClient_UploadFile_Call) RunAndReturn(run func(context.Context, string, []byte) (*UploadFileResponse, error)) *MockFoldersClient_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPath provides a mock function with given fields: ctx, path
func (_m *MockFoldersClient) VerifyPath(ctx context.Context, path string) (bool, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPath")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFoldersClient_VerifyPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPath'
type MockFoldersClient_VerifyPath_Call struct {
	*mock.Call
}

// VerifyPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockFoldersClient_Expecter) VerifyPath(ctx interface{}, path interface{}) *MockFoldersClient_VerifyPath_Call {
	return &MockFoldersClient_VerifyPath_Call{Call: _e.mock.On("VerifyPath", ctx, path)}
}

func (_c *MockFoldersClient_VerifyPath_Call) Run(run func(ctx context.Context, path string)) *MockFoldersClient_VerifyPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFoldersClient_VerifyPath_Call) Return(_a0 bool, _a1 error) *MockFoldersClient_VerifyPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFoldersClient_VerifyPath_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockFoldersClient_VerifyPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFoldersClient creates a new instance of MockFoldersClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFoldersClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFoldersClient {
	mock := &MockFoldersClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
